import pandas as pd
import numpy as np

from feature_generation import FeatureGenerator

class LaLigaDataframe:
    """
        A class that represents the statistics and results for La Liga results across multiple seasons.

        This class handles the preprocessing of the initial SQL database laliga.sqlite from https://github.com/tinchit0/la-quiniela
        and creates a dataframe of the standings for all matchdays across all seasons and divisions. 
        It also contains callable methods to generate new features and to create the matchdays dataframe that
        allows training and prediciton of results.

        Attributes:
            df (pd.DataFrame): The main dataframe containing match information such as scores, teams, and matchdays.
            team_results (pd.DataFrame): Dataframe storing per-team statistics and standings over multiple matchdays.
            match_standings (pd.DataFrame): Dataframe containing cumulative team standings with ranking, goals, points, 
            and match statistics. 
    """
    def __init__(self, dataframe):
        """
        Initializes the LaLigaDataframe class by creating the primary dataframe, and generating additional
        team information dataframes.

        Args:
            dataframe (pd.DataFrame): The initial dataframe containing match data.
        """

        self.df = dataframe
        self._clean_data()
        self._generate_team_info()

    def generate_features(self, selected_features=[]):
        """
        Applies feature generation functions to the dataframe.

        Args:
            selected_features (list, optional): A list of feature names to be generated by the FeatureGenerator class.
        """
        feature_generator = FeatureGenerator()
        feature_generator.apply_features(self, selected_features)

    def generate_matchday_dataframe(self):
        """
        Generates a matchday dataframe for training and prediction purposes.

        Returns:
            MatchdayDataframe: An instance of MatchdayDataframe containing structured matchday data.
        """
        return MatchdayDataframe(self)
    
    
    def _clean_data(self):
        """
        Cleans and preprocesses the initial dataframe by splitting score columns, converting data types,
        and generating match results.
        
        This method splits the 'score' column into 'home_score' and 'away_score', assigns numeric values to them,
        and creates a 'result' column indicating match outcomes as '1' (home win), '2' (away win), or 'X' (draw),
        similar as in La Quiniela.
        """
        self.df[['home_score', 'away_score']] = self.df['score'].str.split(':', expand=True)
        self.df['home_score'] = pd.to_numeric(self.df['home_score'])
        self.df['away_score'] = pd.to_numeric(self.df['away_score'])
        
        self.df['result'] = self.df.apply(lambda row: '1' if row['home_score'] > row['away_score']
                                          else '2' if row['home_score'] < row['away_score']
                                          else 'X', axis=1)
        
        self.df["season"] = pd.to_numeric(self.df["season"].str[-4:])

    def _generate_team_info(self):
        """
        Generates team-level data including win/loss/tie encoding and cumulative standings.
        
        This method calls helper functions to create encoded columns for wins, losses, and ties, and
        to generate cumulative standings by season, division, and matchday.
        """
        self._encoding_win()
        self._generate_matchday_standings()

    def _encoding_win(self):
        """
        Encodes match results as binary indicators for wins, losses, and ties for both home and away teams.

        This method creates columns indicating whether the home or away team won, lost, or tied each match, similar
        to OneHotEncoding.
        """
        self.df['home_W'] = (self.df['result'] == '1').astype(int)
        self.df['home_L'] = (self.df['result'] == '2').astype(int)
        self.df['home_T'] = (self.df['result'] == 'X').astype(int)
        self.df['away_W'] = (self.df['result'] == '2').astype(int)
        self.df['away_L'] = (self.df['result'] == '1').astype(int)
        self.df['away_T'] = (self.df['result'] == 'X').astype(int)

    def _generate_matchday_standings(self):
        """
        Generates cumulative standings by aggregating match results over the season.

        This method calculates goals for (GF), goals against (GA), wins (W), losses (L), ties (T),
        goal difference (GD), and total points (Pts) for each team by season, division, and matchday.
        
        It then sorts the standings and ranks teams based on points, goal difference, and goals scored.
        """
        home_df = self.df[['season', 'division', 'matchday', 'home_team', 'home_score', 'away_score','home_score', 'away_score', 'home_W', 'home_L', 'home_T']]
        home_df.columns = ['season', 'division', 'matchday', 'team', 'GF', 'GA','home_GF', 'home_GA', 'W', 'L', 'T']
        
        away_df = self.df[['season', 'division', 'matchday', 'away_team', 'away_score', 'home_score','away_score', 'home_score', 'away_W', 'away_L', 'away_T']]
        away_df.columns = ['season', 'division', 'matchday', 'team', 'GF', 'GA','away_GF', 'away_GA', 'W', 'L', 'T']
        
        self.team_results = pd.concat([home_df, away_df])
        self.team_results.fillna(0, inplace=True)

        self.match_standings = self.team_results.sort_values(['season', 'division', 'team', 'matchday'])
        self.match_standings[['GF', 'GA','home_GF','home_GA','away_GF','away_GA', 'W', 'L', 'T']] = self.match_standings.groupby(['season', 'division', 'team'])[['GF', 'GA','home_GF','home_GA','away_GF','away_GA', 'W', 'L', 'T']].cumsum()

        self.match_standings['GD'] = self.match_standings['GF'] - self.match_standings['GA']
        self.match_standings['M'] = self.match_standings['W'] + self.match_standings['L'] + self.match_standings['T']
        self.match_standings['Pts'] = self.match_standings['W'] * 3 + self.match_standings['T']

        self.match_standings = self.match_standings.sort_values(by=['season', 'division', 'matchday', 'Pts', 'GD', 'GF'],
                                                                ascending=[True, True, True, False, False, False])

        self.match_standings.insert(3, 'rank', self.match_standings.groupby(['season', 'division', 'matchday'])['Pts']
                                    .rank(ascending=False, method='first'))


class MatchdayDataframe:
    """
    A class that represents a matchday-specific dataframe for La Liga, containing statistics and features
    for each matchday.

    This class builds upon the standings and statistics of each team from the LaLigaDataframe instance,
    creating a dataframe with relevant statistics and optional versus features for each matchday.

    Attributes:
        df (pd.DataFrame): The main dataframe containing match data, including matchday statistics for each team.
        matchday_df (pd.DataFrame): A copy of the match standings dataframe, used to derive team statistics.
    """

    def __init__(self, quiniela_df,versus_features = True):
        """
        Initializes the MatchdayDataframe class, creating a matchday-specific dataframe with optional
        versus features.

        Args:
            quiniela_df (LaLigaDataframe): An instance containing match and standings data.
            versus_features (bool, optional): A flag to determine if versus features are generated. Defaults to True.
        """
        self.df = quiniela_df.df.copy()
        self.matchday_df = quiniela_df.match_standings.copy()
        
        self._prepare_matchday_stats()

        if(versus_features):
            feature_generator = FeatureGenerator()
            feature_generator.apply_features(self, ['versus_features'])

        self._clean_df()

    def _prepare_matchday_stats(self):
        """
        Prepares the matchday statistics for each team by creating separate dataframes for home and away teams.

        This method extracts and renames relevant statistics for home and away teams, allowing team-specific
        statistics to be merged into the main dataframe.
        """
        home_stats = self.matchday_df[['season', 'division', 'matchday', 'team', 'rank', 
                                                       'avg_GF', 'avg_GA', 'home_avg_GF', 'home_avg_GA', 
                                                       'avg_5_last_points','rank_5_last_seasons']]
        
        away_stats = self.matchday_df[['season', 'division', 'matchday', 'team', 'rank', 
                                                       'avg_GF', 'avg_GA', 'away_avg_GF', 'away_avg_GA', 
                                                       'avg_5_last_points','rank_5_last_seasons']]

        home_stats = home_stats.rename(columns={
            'team': 'home_team',
            'rank': 'home_rank',
            'avg_GF': 'home_total_avg_GF',
            'avg_GA': 'home_total_avg_GA',
            'home_avg_GF': 'home_GF_avg',
            'home_avg_GA': 'home_GA_avg',
            'avg_5_last_points': f'home_avg_points_last_5',
            'rank_5_last_seasons' : f'home_rank_5_last_seasons'
        })

        away_stats = away_stats.rename(columns={
            'team': 'away_team',
            'rank': 'away_rank',
            'avg_GF': 'away_total_avg_GF',
            'avg_GA': 'away_total_avg_GA',
            'away_avg_GF': 'away_GF_avg',
            'away_avg_GA': 'away_GA_avg',
            'avg_5_last_points': f'away_avg_points_last_5',
            'rank_5_last_seasons' : f'away_rank_5_last_seasons'

        })
        
        self._adjust_matchday(home_stats,away_stats)

    def _adjust_matchday(self,home_stats,away_stats):
        """
        Adjusts the matchday statistics by shifting matchday values and merging home and away statistics.

        This method merges home and away team statistics with the main dataframe, allowing team-specific
        statistics to be represented for each matchday.

        Args:
            home_stats (pd.DataFrame): Dataframe containing statistics for the home team.
            away_stats (pd.DataFrame): Dataframe containing statistics for the away team.
        """        
        self.df["matchday"] = self.df["matchday"] - 1
        
        self.df = self.df.merge(home_stats, on=['season', 'division', 'matchday', 'home_team'], how='left')
        self.df = self.df.merge(away_stats, on=['season', 'division', 'matchday', 'away_team'], how='left')
        
        self.df["matchday"] = self.df["matchday"] + 1

    def _clean_df(self):
        """
        Cleans the main dataframe by removing unnecessary columns.

        This method drops columns such as date, time, score, and individual win/loss indicators that are
        no longer needed after merging statistics data.
        """        
        self.df.drop(['date', 'time',
       'score', 'home_score', 'away_score', 'home_W',
       'home_L', 'home_T', 'away_W', 'away_L', 'away_T'],axis=1,
       inplace=True)
